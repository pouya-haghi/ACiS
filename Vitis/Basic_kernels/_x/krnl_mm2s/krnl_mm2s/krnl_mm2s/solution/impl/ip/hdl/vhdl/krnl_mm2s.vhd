-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_mm2s is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    k2n_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    k2n_TVALID : OUT STD_LOGIC;
    k2n_TREADY : IN STD_LOGIC;
    k2n_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    k2n_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    k2n_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    k2n_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    k2n_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    k2n_TDEST : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of krnl_mm2s is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "krnl_mm2s_krnl_mm2s,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=4039,HLS_SYN_LUT=4059,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv27_7FFFFFF : STD_LOGIC_VECTOR (26 downto 0) := "111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r : STD_LOGIC_VECTOR (63 downto 0);
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal dest : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_read_reg_166 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_cast_fu_132_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal div_cast_reg_171 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_fu_146_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_reg_177 : STD_LOGIC_VECTOR (26 downto 0);
    signal empty_fu_152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_182 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln72_1_reg_187 : STD_LOGIC_VECTOR (57 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_start : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_done : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_idle : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_ready : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TREADY : STD_LOGIC;
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TDEST : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal div_cast_cast_fu_142_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_k2n_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal k2n_TVALID_int_regslice : STD_LOGIC;
    signal k2n_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_k2n_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_k2n_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_k2n_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_k2n_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_k2n_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_k2n_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_k2n_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_k2n_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_k2n_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_k2n_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_k2n_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_k2n_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_k2n_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_k2n_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_k2n_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_k2n_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_k2n_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_k2n_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_k2n_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_mm2s_krnl_mm2s_Pipeline_VITIS_LOOP_69_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln72_1 : IN STD_LOGIC_VECTOR (57 downto 0);
        div_cast : IN STD_LOGIC_VECTOR (25 downto 0);
        v_dest_V : IN STD_LOGIC_VECTOR (15 downto 0);
        k2n_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        k2n_TVALID : OUT STD_LOGIC;
        k2n_TREADY : IN STD_LOGIC;
        k2n_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        k2n_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        k2n_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        k2n_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        k2n_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        k2n_TDEST : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        empty : IN STD_LOGIC_VECTOR (25 downto 0);
        sub : IN STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component krnl_mm2s_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        dest : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component krnl_mm2s_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component krnl_mm2s_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106 : component krnl_mm2s_krnl_mm2s_Pipeline_VITIS_LOOP_69_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_start,
        ap_done => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_done,
        ap_idle => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_idle,
        ap_ready => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_ready,
        m_axi_gmem_AWVALID => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sext_ln72_1 => trunc_ln72_1_reg_187,
        div_cast => div_cast_reg_171,
        v_dest_V => empty_reg_182,
        k2n_TDATA => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TDATA,
        k2n_TVALID => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID,
        k2n_TREADY => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TREADY,
        k2n_TKEEP => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TKEEP,
        k2n_TSTRB => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TSTRB,
        k2n_TUSER => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TUSER,
        k2n_TLAST => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TLAST,
        k2n_TID => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TID,
        k2n_TDEST => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TDEST,
        in_r => in_r_read_reg_166,
        empty => div_cast_reg_171,
        sub => sub_reg_177);

    control_s_axi_U : component krnl_mm2s_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in_r => in_r,
        size => size,
        dest => dest,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);

    gmem_m_axi_U : component krnl_mm2s_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARADDR,
        I_ARID => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARID,
        I_ARLEN => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARLEN,
        I_ARSIZE => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARSIZE,
        I_ARLOCK => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARLOCK,
        I_ARCACHE => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARCACHE,
        I_ARQOS => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARQOS,
        I_ARPROT => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARPROT,
        I_ARUSER => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARUSER,
        I_ARBURST => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARBURST,
        I_ARREGION => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    regslice_both_k2n_V_data_V_U : component krnl_mm2s_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TDATA,
        vld_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID,
        ack_in => k2n_TREADY_int_regslice,
        data_out => k2n_TDATA,
        vld_out => regslice_both_k2n_V_data_V_U_vld_out,
        ack_out => k2n_TREADY,
        apdone_blk => regslice_both_k2n_V_data_V_U_apdone_blk);

    regslice_both_k2n_V_keep_V_U : component krnl_mm2s_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TKEEP,
        vld_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID,
        ack_in => regslice_both_k2n_V_keep_V_U_ack_in_dummy,
        data_out => k2n_TKEEP,
        vld_out => regslice_both_k2n_V_keep_V_U_vld_out,
        ack_out => k2n_TREADY,
        apdone_blk => regslice_both_k2n_V_keep_V_U_apdone_blk);

    regslice_both_k2n_V_strb_V_U : component krnl_mm2s_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TSTRB,
        vld_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID,
        ack_in => regslice_both_k2n_V_strb_V_U_ack_in_dummy,
        data_out => k2n_TSTRB,
        vld_out => regslice_both_k2n_V_strb_V_U_vld_out,
        ack_out => k2n_TREADY,
        apdone_blk => regslice_both_k2n_V_strb_V_U_apdone_blk);

    regslice_both_k2n_V_user_V_U : component krnl_mm2s_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TUSER,
        vld_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID,
        ack_in => regslice_both_k2n_V_user_V_U_ack_in_dummy,
        data_out => k2n_TUSER,
        vld_out => regslice_both_k2n_V_user_V_U_vld_out,
        ack_out => k2n_TREADY,
        apdone_blk => regslice_both_k2n_V_user_V_U_apdone_blk);

    regslice_both_k2n_V_last_V_U : component krnl_mm2s_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TLAST,
        vld_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID,
        ack_in => regslice_both_k2n_V_last_V_U_ack_in_dummy,
        data_out => k2n_TLAST,
        vld_out => regslice_both_k2n_V_last_V_U_vld_out,
        ack_out => k2n_TREADY,
        apdone_blk => regslice_both_k2n_V_last_V_U_apdone_blk);

    regslice_both_k2n_V_id_V_U : component krnl_mm2s_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TID,
        vld_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID,
        ack_in => regslice_both_k2n_V_id_V_U_ack_in_dummy,
        data_out => k2n_TID,
        vld_out => regslice_both_k2n_V_id_V_U_vld_out,
        ack_out => k2n_TREADY,
        apdone_blk => regslice_both_k2n_V_id_V_U_apdone_blk);

    regslice_both_k2n_V_dest_V_U : component krnl_mm2s_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TDEST,
        vld_in => grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID,
        ack_in => regslice_both_k2n_V_dest_V_U_ack_in_dummy,
        data_out => k2n_TDEST,
        vld_out => regslice_both_k2n_V_dest_V_U_vld_out,
        ack_out => k2n_TREADY,
        apdone_blk => regslice_both_k2n_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_k2n_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_ready = ap_const_logic_1)) then 
                    grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                div_cast_reg_171 <= size(31 downto 6);
                empty_reg_182 <= empty_fu_152_p1;
                in_r_read_reg_166 <= in_r;
                sub_reg_177 <= sub_fu_146_p2;
                trunc_ln72_1_reg_187 <= in_r(63 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4, regslice_both_k2n_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_k2n_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_done)
    begin
        if ((grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(regslice_both_k2n_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_k2n_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, regslice_both_k2n_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_k2n_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_both_k2n_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_k2n_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    div_cast_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_cast_fu_132_p4),27));
    div_cast_fu_132_p4 <= size(31 downto 6);
    empty_fu_152_p1 <= dest(16 - 1 downto 0);

    gmem_ARVALID_assign_proc : process(grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_RREADY <= grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_start <= grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_ap_start_reg;
    grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TREADY <= (k2n_TREADY_int_regslice and ap_CS_fsm_state3);
    k2n_TVALID <= regslice_both_k2n_V_data_V_U_vld_out;
    k2n_TVALID_int_regslice <= grp_krnl_mm2s_Pipeline_VITIS_LOOP_69_1_fu_106_k2n_TVALID;
    sub_fu_146_p2 <= std_logic_vector(unsigned(div_cast_cast_fu_142_p1) + unsigned(ap_const_lv27_7FFFFFF));
end behav;
