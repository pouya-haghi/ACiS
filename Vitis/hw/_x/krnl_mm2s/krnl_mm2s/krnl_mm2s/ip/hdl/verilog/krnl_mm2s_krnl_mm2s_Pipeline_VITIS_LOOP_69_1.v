// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_mm2s_krnl_mm2s_Pipeline_VITIS_LOOP_69_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln72_1,
        div_cast,
        v_dest_V,
        k2n_TDATA,
        k2n_TVALID,
        k2n_TREADY,
        k2n_TKEEP,
        k2n_TSTRB,
        k2n_TUSER,
        k2n_TLAST,
        k2n_TID,
        k2n_TDEST,
        in_r,
        empty,
        sub
);

parameter    ap_ST_fsm_state1 = 72'd1;
parameter    ap_ST_fsm_state2 = 72'd2;
parameter    ap_ST_fsm_state3 = 72'd4;
parameter    ap_ST_fsm_state4 = 72'd8;
parameter    ap_ST_fsm_state5 = 72'd16;
parameter    ap_ST_fsm_state6 = 72'd32;
parameter    ap_ST_fsm_state7 = 72'd64;
parameter    ap_ST_fsm_state8 = 72'd128;
parameter    ap_ST_fsm_state9 = 72'd256;
parameter    ap_ST_fsm_state10 = 72'd512;
parameter    ap_ST_fsm_state11 = 72'd1024;
parameter    ap_ST_fsm_state12 = 72'd2048;
parameter    ap_ST_fsm_state13 = 72'd4096;
parameter    ap_ST_fsm_state14 = 72'd8192;
parameter    ap_ST_fsm_state15 = 72'd16384;
parameter    ap_ST_fsm_state16 = 72'd32768;
parameter    ap_ST_fsm_state17 = 72'd65536;
parameter    ap_ST_fsm_state18 = 72'd131072;
parameter    ap_ST_fsm_state19 = 72'd262144;
parameter    ap_ST_fsm_state20 = 72'd524288;
parameter    ap_ST_fsm_state21 = 72'd1048576;
parameter    ap_ST_fsm_state22 = 72'd2097152;
parameter    ap_ST_fsm_state23 = 72'd4194304;
parameter    ap_ST_fsm_state24 = 72'd8388608;
parameter    ap_ST_fsm_state25 = 72'd16777216;
parameter    ap_ST_fsm_state26 = 72'd33554432;
parameter    ap_ST_fsm_state27 = 72'd67108864;
parameter    ap_ST_fsm_state28 = 72'd134217728;
parameter    ap_ST_fsm_state29 = 72'd268435456;
parameter    ap_ST_fsm_state30 = 72'd536870912;
parameter    ap_ST_fsm_state31 = 72'd1073741824;
parameter    ap_ST_fsm_state32 = 72'd2147483648;
parameter    ap_ST_fsm_state33 = 72'd4294967296;
parameter    ap_ST_fsm_state34 = 72'd8589934592;
parameter    ap_ST_fsm_state35 = 72'd17179869184;
parameter    ap_ST_fsm_state36 = 72'd34359738368;
parameter    ap_ST_fsm_state37 = 72'd68719476736;
parameter    ap_ST_fsm_state38 = 72'd137438953472;
parameter    ap_ST_fsm_state39 = 72'd274877906944;
parameter    ap_ST_fsm_state40 = 72'd549755813888;
parameter    ap_ST_fsm_state41 = 72'd1099511627776;
parameter    ap_ST_fsm_state42 = 72'd2199023255552;
parameter    ap_ST_fsm_state43 = 72'd4398046511104;
parameter    ap_ST_fsm_state44 = 72'd8796093022208;
parameter    ap_ST_fsm_state45 = 72'd17592186044416;
parameter    ap_ST_fsm_state46 = 72'd35184372088832;
parameter    ap_ST_fsm_state47 = 72'd70368744177664;
parameter    ap_ST_fsm_state48 = 72'd140737488355328;
parameter    ap_ST_fsm_state49 = 72'd281474976710656;
parameter    ap_ST_fsm_state50 = 72'd562949953421312;
parameter    ap_ST_fsm_state51 = 72'd1125899906842624;
parameter    ap_ST_fsm_state52 = 72'd2251799813685248;
parameter    ap_ST_fsm_state53 = 72'd4503599627370496;
parameter    ap_ST_fsm_state54 = 72'd9007199254740992;
parameter    ap_ST_fsm_state55 = 72'd18014398509481984;
parameter    ap_ST_fsm_state56 = 72'd36028797018963968;
parameter    ap_ST_fsm_state57 = 72'd72057594037927936;
parameter    ap_ST_fsm_state58 = 72'd144115188075855872;
parameter    ap_ST_fsm_state59 = 72'd288230376151711744;
parameter    ap_ST_fsm_state60 = 72'd576460752303423488;
parameter    ap_ST_fsm_state61 = 72'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 72'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 72'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 72'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 72'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 72'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 72'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 72'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 72'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 72'd590295810358705651712;
parameter    ap_ST_fsm_pp0_stage0 = 72'd1180591620717411303424;
parameter    ap_ST_fsm_state104 = 72'd2361183241434822606848;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [57:0] sext_ln72_1;
input  [25:0] div_cast;
input  [15:0] v_dest_V;
output  [511:0] k2n_TDATA;
output   k2n_TVALID;
input   k2n_TREADY;
output  [63:0] k2n_TKEEP;
output  [63:0] k2n_TSTRB;
output  [0:0] k2n_TUSER;
output  [0:0] k2n_TLAST;
output  [0:0] k2n_TID;
output  [15:0] k2n_TDEST;
input  [63:0] in_r;
input  [25:0] empty;
input  [26:0] sub;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg k2n_TVALID;

(* fsm_encoding = "none" *) reg   [71:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
reg    gmem_blk_n_R;
reg    ap_enable_reg_pp0_iter32;
wire    ap_block_pp0_stage0;
reg    k2n_TDATA_blk_n;
wire    ap_CS_fsm_state70;
wire   [0:0] icmp_ln69_fu_233_p2;
reg   [0:0] icmp_ln69_reg_335;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state71_pp0_stage0_iter0;
wire    ap_block_state72_pp0_stage0_iter1;
wire    ap_block_state73_pp0_stage0_iter2;
wire    ap_block_state74_pp0_stage0_iter3;
wire    ap_block_state75_pp0_stage0_iter4;
wire    ap_block_state76_pp0_stage0_iter5;
wire    ap_block_state77_pp0_stage0_iter6;
wire    ap_block_state78_pp0_stage0_iter7;
wire    ap_block_state79_pp0_stage0_iter8;
wire    ap_block_state80_pp0_stage0_iter9;
wire    ap_block_state81_pp0_stage0_iter10;
wire    ap_block_state82_pp0_stage0_iter11;
wire    ap_block_state83_pp0_stage0_iter12;
wire    ap_block_state84_pp0_stage0_iter13;
wire    ap_block_state85_pp0_stage0_iter14;
wire    ap_block_state86_pp0_stage0_iter15;
wire    ap_block_state87_pp0_stage0_iter16;
wire    ap_block_state88_pp0_stage0_iter17;
wire    ap_block_state89_pp0_stage0_iter18;
wire    ap_block_state90_pp0_stage0_iter19;
wire    ap_block_state91_pp0_stage0_iter20;
wire    ap_block_state92_pp0_stage0_iter21;
wire    ap_block_state93_pp0_stage0_iter22;
wire    ap_block_state94_pp0_stage0_iter23;
wire    ap_block_state95_pp0_stage0_iter24;
wire    ap_block_state96_pp0_stage0_iter25;
wire    ap_block_state97_pp0_stage0_iter26;
wire    ap_block_state98_pp0_stage0_iter27;
wire    ap_block_state99_pp0_stage0_iter28;
wire    ap_block_state100_pp0_stage0_iter29;
wire    ap_block_state101_pp0_stage0_iter30;
wire    ap_block_state102_pp0_stage0_iter31;
reg    ap_block_state103_pp0_stage0_iter32;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln69_reg_335_pp0_iter1_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter2_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter3_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter4_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter5_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter6_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter7_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter8_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter9_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter10_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter11_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter12_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter13_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter14_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter15_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter16_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter17_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter18_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter19_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter20_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter21_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter22_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter23_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter24_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter25_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter26_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter27_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter28_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter29_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter30_reg;
reg   [0:0] icmp_ln69_reg_335_pp0_iter31_reg;
wire   [0:0] icmp_ln78_fu_248_p2;
reg   [0:0] icmp_ln78_reg_339;
reg   [0:0] icmp_ln78_reg_339_pp0_iter1_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter2_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter3_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter4_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter5_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter6_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter7_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter8_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter9_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter10_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter11_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter12_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter13_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter14_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter15_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter16_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter17_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter18_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter19_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter20_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter21_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter22_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter23_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter24_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter25_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter26_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter27_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter28_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter29_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter30_reg;
reg   [0:0] icmp_ln78_reg_339_pp0_iter31_reg;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state71;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg   [0:0] ap_phi_mux_v_last_V_phi_fu_200_p4;
wire   [0:0] ap_phi_reg_pp0_iter32_v_last_V_reg_197;
wire   [0:0] icmp_ln78_1_fu_296_p2;
wire  signed [63:0] sext_ln72_1_cast_fu_214_p1;
reg   [25:0] i_fu_116;
wire   [25:0] add_ln69_fu_238_p2;
reg    ap_block_pp0_stage0_01001;
wire   [26:0] zext_ln69_fu_244_p1;
wire   [22:0] trunc_ln78_fu_253_p1;
wire   [31:0] shl_ln1_fu_257_p3;
wire   [31:0] add_ln78_fu_265_p2;
wire   [28:0] grp_fu_281_p0;
wire   [11:0] grp_fu_281_p1;
wire   [10:0] grp_fu_281_p2;
wire   [10:0] trunc_ln78_2_fu_292_p1;
reg    grp_fu_281_ce;
wire    ap_CS_fsm_state104;
reg   [71:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state104_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 72'd1;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
end

krnl_mm2s_urem_29ns_12ns_11_33_1 #(
    .ID( 1 ),
    .NUM_STAGE( 33 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 11 ))
urem_29ns_12ns_11_33_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_281_p0),
    .din1(grp_fu_281_p1),
    .ce(grp_fu_281_ce),
    .dout(grp_fu_281_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state71) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state71)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state71);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp0_iter32 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (m_axi_gmem_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_116 <= 26'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_fu_233_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_116 <= add_ln69_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln69_reg_335 <= icmp_ln69_fu_233_p2;
        icmp_ln69_reg_335_pp0_iter1_reg <= icmp_ln69_reg_335;
        icmp_ln78_reg_339_pp0_iter1_reg <= icmp_ln78_reg_339;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln69_reg_335_pp0_iter10_reg <= icmp_ln69_reg_335_pp0_iter9_reg;
        icmp_ln69_reg_335_pp0_iter11_reg <= icmp_ln69_reg_335_pp0_iter10_reg;
        icmp_ln69_reg_335_pp0_iter12_reg <= icmp_ln69_reg_335_pp0_iter11_reg;
        icmp_ln69_reg_335_pp0_iter13_reg <= icmp_ln69_reg_335_pp0_iter12_reg;
        icmp_ln69_reg_335_pp0_iter14_reg <= icmp_ln69_reg_335_pp0_iter13_reg;
        icmp_ln69_reg_335_pp0_iter15_reg <= icmp_ln69_reg_335_pp0_iter14_reg;
        icmp_ln69_reg_335_pp0_iter16_reg <= icmp_ln69_reg_335_pp0_iter15_reg;
        icmp_ln69_reg_335_pp0_iter17_reg <= icmp_ln69_reg_335_pp0_iter16_reg;
        icmp_ln69_reg_335_pp0_iter18_reg <= icmp_ln69_reg_335_pp0_iter17_reg;
        icmp_ln69_reg_335_pp0_iter19_reg <= icmp_ln69_reg_335_pp0_iter18_reg;
        icmp_ln69_reg_335_pp0_iter20_reg <= icmp_ln69_reg_335_pp0_iter19_reg;
        icmp_ln69_reg_335_pp0_iter21_reg <= icmp_ln69_reg_335_pp0_iter20_reg;
        icmp_ln69_reg_335_pp0_iter22_reg <= icmp_ln69_reg_335_pp0_iter21_reg;
        icmp_ln69_reg_335_pp0_iter23_reg <= icmp_ln69_reg_335_pp0_iter22_reg;
        icmp_ln69_reg_335_pp0_iter24_reg <= icmp_ln69_reg_335_pp0_iter23_reg;
        icmp_ln69_reg_335_pp0_iter25_reg <= icmp_ln69_reg_335_pp0_iter24_reg;
        icmp_ln69_reg_335_pp0_iter26_reg <= icmp_ln69_reg_335_pp0_iter25_reg;
        icmp_ln69_reg_335_pp0_iter27_reg <= icmp_ln69_reg_335_pp0_iter26_reg;
        icmp_ln69_reg_335_pp0_iter28_reg <= icmp_ln69_reg_335_pp0_iter27_reg;
        icmp_ln69_reg_335_pp0_iter29_reg <= icmp_ln69_reg_335_pp0_iter28_reg;
        icmp_ln69_reg_335_pp0_iter2_reg <= icmp_ln69_reg_335_pp0_iter1_reg;
        icmp_ln69_reg_335_pp0_iter30_reg <= icmp_ln69_reg_335_pp0_iter29_reg;
        icmp_ln69_reg_335_pp0_iter31_reg <= icmp_ln69_reg_335_pp0_iter30_reg;
        icmp_ln69_reg_335_pp0_iter3_reg <= icmp_ln69_reg_335_pp0_iter2_reg;
        icmp_ln69_reg_335_pp0_iter4_reg <= icmp_ln69_reg_335_pp0_iter3_reg;
        icmp_ln69_reg_335_pp0_iter5_reg <= icmp_ln69_reg_335_pp0_iter4_reg;
        icmp_ln69_reg_335_pp0_iter6_reg <= icmp_ln69_reg_335_pp0_iter5_reg;
        icmp_ln69_reg_335_pp0_iter7_reg <= icmp_ln69_reg_335_pp0_iter6_reg;
        icmp_ln69_reg_335_pp0_iter8_reg <= icmp_ln69_reg_335_pp0_iter7_reg;
        icmp_ln69_reg_335_pp0_iter9_reg <= icmp_ln69_reg_335_pp0_iter8_reg;
        icmp_ln78_reg_339_pp0_iter10_reg <= icmp_ln78_reg_339_pp0_iter9_reg;
        icmp_ln78_reg_339_pp0_iter11_reg <= icmp_ln78_reg_339_pp0_iter10_reg;
        icmp_ln78_reg_339_pp0_iter12_reg <= icmp_ln78_reg_339_pp0_iter11_reg;
        icmp_ln78_reg_339_pp0_iter13_reg <= icmp_ln78_reg_339_pp0_iter12_reg;
        icmp_ln78_reg_339_pp0_iter14_reg <= icmp_ln78_reg_339_pp0_iter13_reg;
        icmp_ln78_reg_339_pp0_iter15_reg <= icmp_ln78_reg_339_pp0_iter14_reg;
        icmp_ln78_reg_339_pp0_iter16_reg <= icmp_ln78_reg_339_pp0_iter15_reg;
        icmp_ln78_reg_339_pp0_iter17_reg <= icmp_ln78_reg_339_pp0_iter16_reg;
        icmp_ln78_reg_339_pp0_iter18_reg <= icmp_ln78_reg_339_pp0_iter17_reg;
        icmp_ln78_reg_339_pp0_iter19_reg <= icmp_ln78_reg_339_pp0_iter18_reg;
        icmp_ln78_reg_339_pp0_iter20_reg <= icmp_ln78_reg_339_pp0_iter19_reg;
        icmp_ln78_reg_339_pp0_iter21_reg <= icmp_ln78_reg_339_pp0_iter20_reg;
        icmp_ln78_reg_339_pp0_iter22_reg <= icmp_ln78_reg_339_pp0_iter21_reg;
        icmp_ln78_reg_339_pp0_iter23_reg <= icmp_ln78_reg_339_pp0_iter22_reg;
        icmp_ln78_reg_339_pp0_iter24_reg <= icmp_ln78_reg_339_pp0_iter23_reg;
        icmp_ln78_reg_339_pp0_iter25_reg <= icmp_ln78_reg_339_pp0_iter24_reg;
        icmp_ln78_reg_339_pp0_iter26_reg <= icmp_ln78_reg_339_pp0_iter25_reg;
        icmp_ln78_reg_339_pp0_iter27_reg <= icmp_ln78_reg_339_pp0_iter26_reg;
        icmp_ln78_reg_339_pp0_iter28_reg <= icmp_ln78_reg_339_pp0_iter27_reg;
        icmp_ln78_reg_339_pp0_iter29_reg <= icmp_ln78_reg_339_pp0_iter28_reg;
        icmp_ln78_reg_339_pp0_iter2_reg <= icmp_ln78_reg_339_pp0_iter1_reg;
        icmp_ln78_reg_339_pp0_iter30_reg <= icmp_ln78_reg_339_pp0_iter29_reg;
        icmp_ln78_reg_339_pp0_iter31_reg <= icmp_ln78_reg_339_pp0_iter30_reg;
        icmp_ln78_reg_339_pp0_iter3_reg <= icmp_ln78_reg_339_pp0_iter2_reg;
        icmp_ln78_reg_339_pp0_iter4_reg <= icmp_ln78_reg_339_pp0_iter3_reg;
        icmp_ln78_reg_339_pp0_iter5_reg <= icmp_ln78_reg_339_pp0_iter4_reg;
        icmp_ln78_reg_339_pp0_iter6_reg <= icmp_ln78_reg_339_pp0_iter5_reg;
        icmp_ln78_reg_339_pp0_iter7_reg <= icmp_ln78_reg_339_pp0_iter6_reg;
        icmp_ln78_reg_339_pp0_iter8_reg <= icmp_ln78_reg_339_pp0_iter7_reg;
        icmp_ln78_reg_339_pp0_iter9_reg <= icmp_ln78_reg_339_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_fu_233_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln78_reg_339 <= icmp_ln78_fu_248_p2;
    end
end

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((ap_start == 1'b0) | (m_axi_gmem_ARREADY == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln69_fu_233_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state71 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state71 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state104) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_1_fu_296_p2 == 1'd0) & (icmp_ln78_reg_339_pp0_iter31_reg == 1'd0) & (icmp_ln69_reg_335_pp0_iter31_reg == 1'd0))) begin
        ap_phi_mux_v_last_V_phi_fu_200_p4 = 1'd0;
    end else if ((((icmp_ln78_reg_339_pp0_iter31_reg == 1'd1) & (icmp_ln69_reg_335_pp0_iter31_reg == 1'd0)) | ((icmp_ln78_1_fu_296_p2 == 1'd1) & (icmp_ln69_reg_335_pp0_iter31_reg == 1'd0)))) begin
        ap_phi_mux_v_last_V_phi_fu_200_p4 = 1'd1;
    end else begin
        ap_phi_mux_v_last_V_phi_fu_200_p4 = ap_phi_reg_pp0_iter32_v_last_V_reg_197;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter32 == 1'b1))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_281_ce = 1'b1;
    end else begin
        grp_fu_281_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter32 == 1'b1))) begin
        k2n_TDATA_blk_n = k2n_TREADY;
    end else begin
        k2n_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter32 == 1'b1))) begin
        k2n_TVALID = 1'b1;
    end else begin
        k2n_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (m_axi_gmem_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter32 == 1'b1))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (m_axi_gmem_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_233_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter31 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter32 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter31 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter32 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_fu_233_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln69_fu_238_p2 = (i_fu_116 + 26'd1);

assign add_ln78_fu_265_p2 = (shl_ln1_fu_257_p3 + 32'd512);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter32 == 1'b1) & ((k2n_TREADY == 1'b0) | (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter32 == 1'b1) & ((k2n_TREADY == 1'b0) | (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter32 == 1'b1) & ((k2n_TREADY == 1'b0) | (m_axi_gmem_RVALID == 1'b0)));
end

assign ap_block_state100_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state103_pp0_stage0_iter32 = ((k2n_TREADY == 1'b0) | (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state71_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter32_v_last_V_reg_197 = 'bx;

assign grp_fu_281_p0 = {{add_ln78_fu_265_p2[31:3]}};

assign grp_fu_281_p1 = 29'd1408;

assign icmp_ln69_fu_233_p2 = ((i_fu_116 == div_cast) ? 1'b1 : 1'b0);

assign icmp_ln78_1_fu_296_p2 = ((trunc_ln78_2_fu_292_p1 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_248_p2 = ((sub == zext_ln69_fu_244_p1) ? 1'b1 : 1'b0);

assign k2n_TDATA = m_axi_gmem_RDATA;

assign k2n_TDEST = v_dest_V;

assign k2n_TID = 1'd0;

assign k2n_TKEEP = 64'd18446744073709551615;

assign k2n_TLAST = ap_phi_mux_v_last_V_phi_fu_200_p4;

assign k2n_TSTRB = 64'd0;

assign k2n_TUSER = 1'd0;

assign m_axi_gmem_ARADDR = sext_ln72_1_cast_fu_214_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = empty;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign sext_ln72_1_cast_fu_214_p1 = $signed(sext_ln72_1);

assign shl_ln1_fu_257_p3 = {{trunc_ln78_fu_253_p1}, {9'd0}};

assign trunc_ln78_2_fu_292_p1 = grp_fu_281_p2[10:0];

assign trunc_ln78_fu_253_p1 = i_fu_116[22:0];

assign zext_ln69_fu_244_p1 = i_fu_116;

endmodule //krnl_mm2s_krnl_mm2s_Pipeline_VITIS_LOOP_69_1
